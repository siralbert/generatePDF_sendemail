#!/usr/bin/env python3

import json
import locale
import sys

import reports
import emails
import os

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}

  current_most_sales = 0
  most_sales = {}
  sales_by_car_year = {}

  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item #TODO: max means most?

    # car model with the most sales
    item_sales = item["total_sales"]   
    if item_sales > current_most_sales:
      current_most_sales = item_sales
      most_sales = item

    # most popular car_year
    if item["car"]["car_year"] in sales_by_car_year:
        sales_by_car_year[item["car"]["car_year"]] = sales_by_car_year["car"]["car_year"] + item["total_sales"]
    else:
        sales_by_car_year[item["car"]["car_year"]] = item["total_sales"]

  most_popular_year = max(sales_by_car_year,key=sales_by_car_year.get)
  summary = {
          "max_revenue":"The {} generated the most revenue: ${:,.2f}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),

      "most_sales":"The {} had the most sales: {} vehicles".format(
      format_car(most_sales["car"]), most_sales["total_sales"]),

      "most_popular_car_year":"Car year {} was the most popular.".format(
      most_popular_year)
  }

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary["max_revenue"])
  print(summary["most_sales"])
  print(summary["most_popular_car_year"])

# sort data according to sales from most to least
  sorted_data = [["ID", "Car", "Price", "Total Sales"]]
  sorted_data[1:] = sorted(cars_dict_to_table(data)[1:], key=lambda row: row[3], reverse=True)

# generate PDF report
  reports.generate("/tmp/cars.pdf","Car Sales","Summary:<br />" + summary["max_revenue"] + '<br />' + summary["most_sales"] + '<br />' + summary["most_popular_car_year"], sorted_data)

# send report via email attachment
  message = emails.generate("automation@example.com","{}@example.com".format(os.environ.get('USER')),"Sales summary for last month","Summary:\n" + summary["max_revenue"] + '\n' + summary["most_sales"] + '\n' + summary["most_popular_car_year"],"/tmp/cars.pdf")
  print(message)
  emails.send(message)

if __name__ == "__main__":
  main(sys.argv)
